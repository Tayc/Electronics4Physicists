#Written by TAC F2022
#this program reads the file generated by the ADC reader program
#it then outputs these values via the GPIO pins to the shift register and
#then triggers the DAC connected to the speaker
#the shift registers have to be latched. they latch on the rising edge of the clock signal
import numpy as np
import RPi.GPIO as GPIO
import time
from time import sleep

data = np.loadtxt("mybinarysound.txt", int) #opens the ADC generated file
records = np.empty((len(data),1),dtype=object)
binOut = np.zeros((len(data),8), dtype=int) #intiallizes n*8 array to hold 8-bit binary

#sets up the GPIO
outPins = [11,12,13,14,15,16,17,18] #list of pins connected to DAC
pPin = 0 #pin to prime the shift registers
GPIO.setmode(GPIO.BCM)
GPIO.setup(pPin,GPIO.OUT)
GPIO.setup(outPins,GPIO.OUT)
n=0 #indexing variable
while n < len(data): # turns the int data into 8bit array in 
    records[n]= format(data[n], '08b')
    n+=1
    #print(records[n])

#this code block takes all the data and complies it into an n*8 array
for row in range(0,len(data)):
    binStr = str(records[row])
    #print(binStr)
    for i in range(0,8): #selects sets one bit in the array
        binOut[row,i] = int(binStr[i+2])
print(binOut)

#read output array ands set the GPIO pins

for line in range(0,len(data)): #this loop clocks at ~11/12 kHz
#t_end = time.time() + 5 # current time * seconds * minutes
#while time.time() < t_end:
    GPIO.output(pPin, GPIO.LOW) 
#    print('set')
    for g in range(0,8): #goes through all 8 columns and sets the pins high or low
        if binOut[line,g] == True:
            GPIO.output(outPins[g], GPIO.HIGH)
#            print('HIGH ')
        else:
            GPIO.output(outPins[g], GPIO.LOW)
#            print('LOW ')
    GPIO.output(pPin, GPIO.HIGH)
#    print('latched \n')
GPIO.output(outPins, GPIO.LOW)